// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  CUSTOMER
  ADMIN
  VENDOR
}

enum StatusEnum {
  ACTIVE
  INACTIVE
}
model AdminActivity {
  id                    Int      @id @default(autoincrement())
  admin_id              Int
  admin                 Admin    @relation(fields: [admin_id], references: [id])
  activity_type         String
  description           String?
  created_at            DateTime @default(now())
}
model Auth {
  id                    Int         @id @default(autoincrement())
  uuid                  String      @default(uuid()) @unique
  user_id               Int
  user                  User        @relation(fields: [user_id], references: [id])
  token                 String      @db.Text
  is_logged_in          Boolean     @default(false)
  last_login            DateTime?
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
}

model User {
  id                    Int         @id @default(autoincrement())
  first_name            String
  last_name             String
  display_name          String?
  email                 String      @unique
  password              String?
  role                  RoleEnum    @default(CUSTOMER)
  status                StatusEnum  @default(ACTIVE)
  provider              String?
  provider_id           String?
  email_verified        Boolean     @default(false)
  avatar                String?
  reset_token           String?
  reset_token_expires   DateTime?
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  deleted_at            DateTime?

  reset_code            String?
  reset_code_expires    DateTime?

  // Relations
  refresh_tokens        RefreshToken[]
  auths                 Auth[]
  password_changes      PasswordChange[]
  orders                Order[]
  addresses             Address[]
  wishlists             Wishlist[]
  product_reviews       ProductReview[]
  product_questions     ProductQuestion[]
  payments              Payment[]
  credit_cards          CreditCard[]
  contacts              Contact[]
  notifications         Notification[]
  admin                 Admin?
  vendor                Vendor?
  cart                  Cart[]
  user_roles            User_Role[] @relation("UserRole_User")
  customer              Customer?
}

model User_Role {
  id                    Int       @id @default(autoincrement())
  user_id               Int
  role_id               Int
  creator_id            Int
  created_at            DateTime @default(now())
  is_default            Boolean  @default(false)

  user                  User @relation("UserRole_User", fields: [user_id], references: [id])
  role                  Role @relation(fields: [role_id], references: [id])
}

model Role {
  id                    Int    @id @default(autoincrement())
  uuid                  String @default(uuid()) @unique
  name                  String
  slug                  String

  userRoles User_Role[]
}

model Customer {
  id                    Int      @id @default(autoincrement())
  user_id               Int      @unique
  user                  User     @relation(fields: [user_id], references: [id])
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  loyalty_points        Int    @default(0)
  shipping_preferences  String?
  
  orders                Order[]
  addresses             Address[]
  wishlists             Wishlist[]
}

model RefreshToken {
  id                    Int      @id @default(autoincrement())
  userId                Int      @map("user_id")
  token                 String   @unique
  expiresAt             DateTime @map("expires_at")
  createdAt             DateTime @default(now()) @map("created_at")
  createdByIp           String?  @map("created_by_ip")

  user                  User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model PasswordChange {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id])
  old_password          String
  new_password          String
  confirm_password      String
  changed_at            DateTime @default(now())
}

model Order {
  id                    Int       @id @default(autoincrement())
  uuid                  String    @default(uuid()) @unique
  user_id               Int
  user                  User      @relation(fields: [user_id], references: [id])
  vendor_id             Int?
  vendor                Vendor?   @relation(fields: [vendor_id], references: [id])
  order_date            DateTime
  status                String
  payment_status        String    @default("unpaid")
  total_amount          Float
  payment_method        String
  shipping_address      String
  shipping_method_id    Int?
  shipping_method       ShippingMethod? @relation(fields: [shipping_method_id], references: [id])
  created_at            DateTime  @default(now())
  
  order_items           OrderItem[]
  payments              Payment[]
  order_status_history  OrderStatusHistory[]
  vendor_orders         VendorOrder[]
  customer              Customer?  @relation(fields: [user_id], references: [id], map: "Order_user_id_to_Customer")
}

model Address {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id])
  address_line1         String
  address_line2         String?
  city                  String
  state                 String
  postal_code           String
  country               String
  phone_number          String
  is_default            Boolean  @default(false)
  created_at            DateTime @default(now())
  type                  String   

  customer              Customer? @relation(fields: [user_id], references: [user_id], map: "Address_user_id_to_Customer")
}

model Wishlist {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id])
  product_id            Int
  product               Product  @relation(fields: [product_id], references: [id])
  created_at            DateTime @default(now())

  customer              Customer? @relation(fields: [user_id], references: [user_id], map: "Wishlist_user_id_to_Customer")
}

model Product {
  id                    Int       @id @default(autoincrement())
  uuid                  String    @default(uuid()) @unique
  name                  String
  description           String?
  price                 Float
  stock                 Int       @default(0)
  category_id           Int
  category              Category  @relation(fields: [category_id], references: [id])
  brand_id              Int
  brand                 Brand     @relation(fields: [brand_id], references: [id])
  is_new_arrival        Boolean   @default(false)
  is_best_seller        Boolean   @default(false)
  created_at            DateTime  @default(now())
  
  product_collections   ProductCollection[]
  product_reviews       ProductReview[]
  product_questions     ProductQuestion[]
  product_images        ProductImage[]
  discounts             Discount[]
  cart_items            Cart[]
  order_items           OrderItem[]
  vendor_products       VendorProduct[]
  wishlists             Wishlist[]
}

model Collection {
  id                    Int      @id @default(autoincrement())
  name                  String   @unique
  description           String?
  created_at            DateTime @default(now())
  
  product_collections   ProductCollection[]
}

model ProductCollection {
  id                    Int      @id @default(autoincrement())
  product_id            Int
  product               Product  @relation(fields: [product_id], references: [id])
  collection_id         Int
  collection            Collection @relation(fields: [collection_id], references: [id])
  created_at            DateTime @default(now())
}

model Category {
  id                    Int     @id @default(autoincrement())
  name                  String  @unique
  
  products              Product[]
  discounts             Discount[]
}

model Brand {
  id                    Int     @id @default(autoincrement())
  name                  String  @unique
  
  products              Product[]
  discounts             Discount[]
}

model ProductReview {
  id                    Int      @id @default(autoincrement())
  product_id            Int
  product               Product  @relation(fields: [product_id], references: [id])
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id])
  rating                Int
  comment               String?
  created_at            DateTime @default(now())
}

model ProductQuestion {
  id                    Int      @id @default(autoincrement())
  product_id            Int
  product               Product  @relation(fields: [product_id], references: [id])
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id])
  question              String
  answer                String?
  created_at            DateTime @default(now())
}

model ProductImage {
  id                    Int      @id @default(autoincrement())
  product_id            Int
  product               Product  @relation(fields: [product_id], references: [id])
  image_url             String
  is_primary            Boolean  @default(false)
  created_at            DateTime @default(now())
}

model Discount {
  id                    Int      @id @default(autoincrement())
  product_id            Int?
  product               Product? @relation(fields: [product_id], references: [id])
  category_id           Int?
  category              Category? @relation(fields: [category_id], references: [id])
  brand_id              Int?
  brand                 Brand?    @relation(fields: [brand_id], references: [id])
  code                  String   @unique
  discount_type         String
  value                 Float
  start_date            DateTime?
  end_date              DateTime?
  created_at            DateTime @default(now())
}

model Cart {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id])
  product_id            Int
  product               Product  @relation(fields: [product_id], references: [id])
  quantity              Int      @default(1)
  shipping_method_id    Int?
  shipping_method       ShippingMethod? @relation(fields: [shipping_method_id], references: [id])
}

model OrderItem {
  id                    Int      @id @default(autoincrement())
  order_id              Int
  order                 Order    @relation(fields: [order_id], references: [id])
  product_id            Int
  product               Product  @relation(fields: [product_id], references: [id])
  quantity              Int
  price                 Float
}

model Payment {
  id                    Int      @id @default(autoincrement())
  uuid                  String   @default(uuid()) @unique
  order_id              Int
  order                 Order    @relation(fields: [order_id], references: [id])
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id])
  credit_card_id        Int?
  credit_card           CreditCard? @relation(fields: [credit_card_id], references: [id])
  payment_method        String
  payment_gateway       String
  transaction_id        String?  @unique
  status                String   @default("pending")
  created_at            DateTime @default(now())
}

model CreditCard {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id])
  card_last4            String
  card_brand            String
  token                 String
  is_default            Boolean  @default(false)
  created_at            DateTime @default(now())
  
  payments              Payment[]
}

model ShippingMethod {
  id                    Int      @id @default(autoincrement())
  name                  String
  cost                  Float
  delivery_time         String
  created_at            DateTime @default(now())
  
  orders                Order[]
  cart_items            Cart[]
}

model OrderStatusHistory {
  id                    Int      @id @default(autoincrement())
  order_id              Int
  order                 Order    @relation(fields: [order_id], references: [id])
  status                String
  changed_at            DateTime @default(now())
}

model Contact {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id])
  message               String
  status                String   @default("open")
  created_at            DateTime @default(now())
}

model Notification {
  id                    Int      @id @default(autoincrement())
  user_id               Int
  user                  User     @relation(fields: [user_id], references: [id])
  message               String
  is_read               Boolean  @default(false)
  created_at            DateTime @default(now())
}

model Admin {
  id                    Int      @id @default(autoincrement())
  user_id               Int      @unique
  user                  User     @relation(fields: [user_id], references: [id])
  role                  String   @default("admin")
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  
  admin_activities      AdminActivity[]
}

model Permission {
  id                    Int      @id @default(autoincrement())
  role                  String
  can_view              Boolean  @default(false)
  can_edit              Boolean  @default(false)
  can_delete            Boolean  @default(false)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}



model Vendor {
  id                    Int       @id @default(autoincrement())
  uuid                  String    @default(uuid()) @unique
  user_id               Int       @unique
  user                  User      @relation(fields: [user_id], references: [id])
  business_name         String
  business_email        String    @unique
  business_phone        String
  status                String    @default("pending")
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  
  vendor_products       VendorProduct[]
  vendor_events         VendorEvent[]
  vendor_orders         VendorOrder[]
  orders                Order[]
}

model VendorProduct {
  id                    Int      @id @default(autoincrement())
  vendor_id             Int
  vendor                Vendor   @relation(fields: [vendor_id], references: [id])
  product_id            Int
  product               Product  @relation(fields: [product_id], references: [id])
  created_at            DateTime @default(now())
}

model VendorEvent {
  id                    Int      @id @default(autoincrement())
  vendor_id             Int
  vendor                Vendor   @relation(fields: [vendor_id], references: [id])
  event_name            String
  event_poster          String?
  start_date            DateTime
  end_date              DateTime
  created_at            DateTime @default(now())
}

model VendorOrder {
  id                    Int      @id @default(autoincrement())
  vendor_id             Int
  vendor                Vendor   @relation(fields: [vendor_id], references: [id])
  order_id              Int
  order                 Order    @relation(fields: [order_id], references: [id])
  status                String   @default("pending")
  vendor_amount         Float
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}