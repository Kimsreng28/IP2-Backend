// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Auth {
  id           String   @id @default(uuid())
  user_id      String
  user         User     @relation(fields: [user_id], references: [id])
  token        String   @db.Text
  is_logged_in Boolean  @default(false)
  last_login   DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model User {
  id           String     @id @default(uuid())
  first_name   String
  last_name    String
  display_name String?
  email        String     @unique
  password     String
  role         String     @default("customer")
  status       String     @default("active")
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  deleted_at   DateTime?

  reset_code         String?
  reset_code_expires DateTime?
  
  // Relations
  auths             Auth[]
  password_changes  PasswordChange[]
  orders            Order[]
  addresses         Address[]
  wishlists         Wishlist[]
  product_reviews   ProductReview[]
  product_questions ProductQuestion[]
  payments          Payment[]
  credit_cards      CreditCard[]
  contacts          Contact[]
  notifications     Notification[]
  admin             Admin?
  vendor            Vendor?

  Cart Cart[]
}

model PasswordChange {
  id           String   @id @default(uuid())
  user_id      String
  user         User     @relation(fields: [user_id], references: [id])
  old_password String
  new_password String
  confirm_password String
  changed_at   DateTime @default(now())
}

model Order {
  id              String     @id @default(uuid())
  user_id         String
  user            User       @relation(fields: [user_id], references: [id])
  vendor_id       String?
  vendor          Vendor?    @relation(fields: [vendor_id], references: [id])
  order_date      DateTime
  status          String
  payment_status  String     @default("unpaid")
  total_amount    Float
  payment_method  String
  shipping_address String
  shipping_method_id String?
  shipping_method ShippingMethod? @relation(fields: [shipping_method_id], references: [id])
  created_at      DateTime   @default(now())
  
  // Relations
  order_items        OrderItem[]
  payments           Payment[]
  order_status_history OrderStatusHistory[]
  vendor_orders      VendorOrder[]
}

model Address {
  id            String   @id @default(uuid())
  user_id       String
  user          User     @relation(fields: [user_id], references: [id])
  address_line1 String
  address_line2 String?
  city          String
  state         String
  postal_code   String
  country       String
  is_default    Boolean  @default(false)
  created_at    DateTime @default(now())
}

model Wishlist {
  id          String   @id @default(uuid())
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  product_id  String
  product     Product  @relation(fields: [product_id], references: [id])
  created_at  DateTime @default(now())
}

model Product {
  id              String     @id @default(uuid())
  name            String
  description     String?
  price           Float
  stock           Int        @default(0)
  category_id     String
  category        Category   @relation(fields: [category_id], references: [id])
  brand_id        String
  brand           Brand      @relation(fields: [brand_id], references: [id])
  is_new_arrival  Boolean    @default(false)
  is_best_seller  Boolean    @default(false)
  created_at      DateTime   @default(now())
  
  // Relations
  product_collections ProductCollection[]
  product_reviews     ProductReview[]
  product_questions   ProductQuestion[]
  product_images      ProductImage[]
  discounts           Discount[]
  cart_items          Cart[]
  order_items         OrderItem[]
  vendor_products     VendorProduct[]

  Wishlist Wishlist[]
}

model Collection {
  id            String     @id @default(uuid())
  name          String     @unique
  description   String?
  created_at    DateTime   @default(now())
  
  // Relations
  product_collections ProductCollection[]
}

model ProductCollection {
  id             String     @id @default(uuid())
  product_id     String
  product        Product    @relation(fields: [product_id], references: [id])
  collection_id  String
  collection     Collection @relation(fields: [collection_id], references: [id])
  created_at     DateTime   @default(now())
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  
  // Relations
  products    Product[]
  discounts   Discount[]
}

model Brand {
  id          String    @id @default(uuid())
  name        String    @unique
  
  // Relations
  products    Product[]
  discounts   Discount[]
}

model ProductReview {
  id          String   @id @default(uuid())
  product_id  String
  product     Product  @relation(fields: [product_id], references: [id])
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  rating      Int
  comment     String?
  created_at  DateTime @default(now())
}

model ProductQuestion {
  id          String   @id @default(uuid())
  product_id  String
  product     Product  @relation(fields: [product_id], references: [id])
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  question    String
  answer      String?
  created_at  DateTime @default(now())
}

model ProductImage {
  id          String   @id @default(uuid())
  product_id  String
  product     Product  @relation(fields: [product_id], references: [id])
  image_url   String
  is_primary  Boolean  @default(false)
  created_at  DateTime @default(now())
}

model Discount {
  id            String   @id @default(uuid())
  product_id    String?
  product       Product? @relation(fields: [product_id], references: [id])
  category_id   String?
  category      Category? @relation(fields: [category_id], references: [id])
  brand_id      String?
  brand         Brand?    @relation(fields: [brand_id], references: [id])
  code          String   @unique
  discount_type String
  value         Float
  start_date    DateTime?
  end_date      DateTime?
  created_at    DateTime @default(now())
}

model Cart {
  id              String   @id @default(uuid())
  user_id         String
  user            User     @relation(fields: [user_id], references: [id])
  product_id      String
  product         Product  @relation(fields: [product_id], references: [id])
  quantity        Int      @default(1)
  shipping_method_id String?
  shipping_method ShippingMethod? @relation(fields: [shipping_method_id], references: [id])
}

model OrderItem {
  id          String   @id @default(uuid())
  order_id    String
  order       Order    @relation(fields: [order_id], references: [id])
  product_id  String
  product     Product  @relation(fields: [product_id], references: [id])
  quantity    Int
  price       Float
}

model Payment {
  id              String   @id @default(uuid())
  order_id        String
  order           Order    @relation(fields: [order_id], references: [id])
  user_id         String
  user            User     @relation(fields: [user_id], references: [id])
  credit_card_id  String?
  credit_card     CreditCard? @relation(fields: [credit_card_id], references: [id])
  payment_method  String
  payment_gateway String
  transaction_id  String?  @unique
  status          String   @default("pending")
  created_at      DateTime @default(now())
}

model CreditCard {
  id          String   @id @default(uuid())
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  card_last4  String
  card_brand  String
  token       String
  is_default  Boolean  @default(false)
  created_at  DateTime @default(now())
  
  // Relations
  payments    Payment[]
}

model ShippingMethod {
  id            String   @id @default(uuid())
  name          String
  cost          Float
  delivery_time String
  created_at    DateTime @default(now())
  
  // Relations
  orders        Order[]
  cart_items    Cart[]
}

model OrderStatusHistory {
  id          String   @id @default(uuid())
  order_id    String
  order       Order    @relation(fields: [order_id], references: [id])
  status      String
  changed_at  DateTime @default(now())
}

model Contact {
  id          String   @id @default(uuid())
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  message     String
  status      String   @default("open")
  created_at  DateTime @default(now())
}

model Notification {
  id          String   @id @default(uuid())
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  message     String
  is_read     Boolean  @default(false)
  created_at  DateTime @default(now())
}

model Admin {
  id          String   @id @default(uuid())
  user_id     String @unique
  user        User     @relation(fields: [user_id], references: [id])
  role        String   @default("admin")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  admin_activities AdminActivity[]
}

model Permission {
  id          String   @id @default(uuid())
  role        String
  can_view    Boolean  @default(false)
  can_edit    Boolean  @default(false)
  can_delete  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model AdminActivity {
  id            String   @id @default(uuid())
  admin_id      String
  admin         Admin    @relation(fields: [admin_id], references: [id])
  activity_type String
  description   String?
  created_at    DateTime @default(now())
}

model Vendor {
  id              String     @id @default(uuid())
  user_id         String @unique
  user            User       @relation(fields: [user_id], references: [id])
  business_name   String
  business_email  String     @unique
  business_phone  String
  status          String     @default("pending")
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  
  // Relations
  vendor_products VendorProduct[]
  vendor_events   VendorEvent[]
  vendor_orders   VendorOrder[]
  orders          Order[]
}

model VendorProduct {
  id          String   @id @default(uuid())
  vendor_id   String
  vendor      Vendor   @relation(fields: [vendor_id], references: [id])
  product_id  String
  product     Product  @relation(fields: [product_id], references: [id])
  created_at  DateTime @default(now())
}

model VendorEvent {
  id          String   @id @default(uuid())
  vendor_id   String
  vendor      Vendor   @relation(fields: [vendor_id], references: [id])
  event_name  String
  event_poster String?
  start_date  DateTime
  end_date    DateTime
  created_at  DateTime @default(now())
}

model VendorOrder {
  id            String   @id @default(uuid())
  vendor_id     String
  vendor        Vendor   @relation(fields: [vendor_id], references: [id])
  order_id      String
  order         Order    @relation(fields: [order_id], references: [id])
  status        String   @default("pending")
  vendor_amount Float
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}